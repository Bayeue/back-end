// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	domain_transaction "ppob/transaction/domain"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Count provides a mock function with given fields: cat, phone, id_customer, detail_product
func (_m *Repository) Count(cat string, phone string, id_customer string, detail_product string) (string, int) {
	ret := _m.Called(cat, phone, id_customer, detail_product)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string, string, string) string); ok {
		r0 = rf(cat, phone, id_customer, detail_product)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(string, string, string, string) int); ok {
		r1 = rf(cat, phone, id_customer, detail_product)
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}

// GetFavorite provides a mock function with given fields: cat, phone
func (_m *Repository) GetFavorite(cat string, phone string) []domain_transaction.Transaction {
	ret := _m.Called(cat, phone)

	var r0 []domain_transaction.Transaction
	if rf, ok := ret.Get(0).(func(string, string) []domain_transaction.Transaction); ok {
		r0 = rf(cat, phone)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain_transaction.Transaction)
		}
	}

	return r0
}

// GetPayment provides a mock function with given fields: id
func (_m *Repository) GetPayment(id string) domain_transaction.Payment {
	ret := _m.Called(id)

	var r0 domain_transaction.Payment
	if rf, ok := ret.Get(0).(func(string) domain_transaction.Payment); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(domain_transaction.Payment)
	}

	return r0
}

// GetTransactionByPaymentId provides a mock function with given fields: payment_id
func (_m *Repository) GetTransactionByPaymentId(payment_id string) (domain_transaction.Transaction, error) {
	ret := _m.Called(payment_id)

	var r0 domain_transaction.Transaction
	if rf, ok := ret.Get(0).(func(string) domain_transaction.Transaction); ok {
		r0 = rf(payment_id)
	} else {
		r0 = ret.Get(0).(domain_transaction.Transaction)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(payment_id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionByPhone provides a mock function with given fields: phone
func (_m *Repository) GetTransactionByPhone(phone string) []domain_transaction.Transaction {
	ret := _m.Called(phone)

	var r0 []domain_transaction.Transaction
	if rf, ok := ret.Get(0).(func(string) []domain_transaction.Transaction); ok {
		r0 = rf(phone)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain_transaction.Transaction)
		}
	}

	return r0
}

// StoreDetailTransaction provides a mock function with given fields: domain
func (_m *Repository) StoreDetailTransaction(domain domain_transaction.Detail_Transaction) error {
	ret := _m.Called(domain)

	var r0 error
	if rf, ok := ret.Get(0).(func(domain_transaction.Detail_Transaction) error); ok {
		r0 = rf(domain)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StorePayment provides a mock function with given fields: domain
func (_m *Repository) StorePayment(domain domain_transaction.Payment) error {
	ret := _m.Called(domain)

	var r0 error
	if rf, ok := ret.Get(0).(func(domain_transaction.Payment) error); ok {
		r0 = rf(domain)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StoreTransaction provides a mock function with given fields: domain
func (_m *Repository) StoreTransaction(domain domain_transaction.Transaction) error {
	ret := _m.Called(domain)

	var r0 error
	if rf, ok := ret.Get(0).(func(domain_transaction.Transaction) error); ok {
		r0 = rf(domain)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTransaction provides a mock function with given fields: domain
func (_m *Repository) UpdateTransaction(domain domain_transaction.Transaction) error {
	ret := _m.Called(domain)

	var r0 error
	if rf, ok := ret.Get(0).(func(domain_transaction.Transaction) error); ok {
		r0 = rf(domain)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepository creates a new instance of Repository. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t testing.TB) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
