// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	domain_products "ppob/products/domain"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: id
func (_m *Repository) Delete(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCategory provides a mock function with given fields: id
func (_m *Repository) DeleteCategory(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteDetail provides a mock function with given fields: id
func (_m *Repository) DeleteDetail(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteDetails provides a mock function with given fields: Detail_Product
func (_m *Repository) DeleteDetails(Detail_Product string) error {
	ret := _m.Called(Detail_Product)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(Detail_Product)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields:
func (_m *Repository) GetAll() ([]domain_products.Products, error) {
	ret := _m.Called()

	var r0 []domain_products.Products
	if rf, ok := ret.Get(0).(func() []domain_products.Products); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain_products.Products)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByCategory provides a mock function with given fields: id
func (_m *Repository) GetByCategory(id int) []domain_products.Products {
	ret := _m.Called(id)

	var r0 []domain_products.Products
	if rf, ok := ret.Get(0).(func(int) []domain_products.Products); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain_products.Products)
		}
	}

	return r0
}

// GetByID provides a mock function with given fields: id
func (_m *Repository) GetByID(id int) (domain_products.Products, error) {
	ret := _m.Called(id)

	var r0 domain_products.Products
	if rf, ok := ret.Get(0).(func(int) domain_products.Products); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(domain_products.Products)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCategories provides a mock function with given fields:
func (_m *Repository) GetCategories() ([]domain_products.Category_Product, error) {
	ret := _m.Called()

	var r0 []domain_products.Category_Product
	if rf, ok := ret.Get(0).(func() []domain_products.Category_Product); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain_products.Category_Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCategoryById provides a mock function with given fields: id
func (_m *Repository) GetCategoryById(id int) (domain_products.Category_Product, error) {
	ret := _m.Called(id)

	var r0 domain_products.Category_Product
	if rf, ok := ret.Get(0).(func(int) domain_products.Category_Product); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(domain_products.Category_Product)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDetail provides a mock function with given fields: detail_slug
func (_m *Repository) GetDetail(detail_slug string) (domain_products.Detail_Product, error) {
	ret := _m.Called(detail_slug)

	var r0 domain_products.Detail_Product
	if rf, ok := ret.Get(0).(func(string) domain_products.Detail_Product); ok {
		r0 = rf(detail_slug)
	} else {
		r0 = ret.Get(0).(domain_products.Detail_Product)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(detail_slug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDetailsByCode provides a mock function with given fields: product_slug
func (_m *Repository) GetDetailsByCode(product_slug string) ([]domain_products.Detail_Product, error) {
	ret := _m.Called(product_slug)

	var r0 []domain_products.Detail_Product
	if rf, ok := ret.Get(0).(func(string) []domain_products.Detail_Product); ok {
		r0 = rf(product_slug)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain_products.Detail_Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(product_slug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductTransaction provides a mock function with given fields: detail_slug
func (_m *Repository) GetProductTransaction(detail_slug string) (domain_products.Products, error) {
	ret := _m.Called(detail_slug)

	var r0 domain_products.Products
	if rf, ok := ret.Get(0).(func(string) domain_products.Products); ok {
		r0 = rf(detail_slug)
	} else {
		r0 = ret.Get(0).(domain_products.Products)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(detail_slug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: domain
func (_m *Repository) Store(domain domain_products.Products) error {
	ret := _m.Called(domain)

	var r0 error
	if rf, ok := ret.Get(0).(func(domain_products.Products) error); ok {
		r0 = rf(domain)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StoreCategory provides a mock function with given fields: domain
func (_m *Repository) StoreCategory(domain domain_products.Category_Product) error {
	ret := _m.Called(domain)

	var r0 error
	if rf, ok := ret.Get(0).(func(domain_products.Category_Product) error); ok {
		r0 = rf(domain)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StoreDetail provides a mock function with given fields: product_slug, domain
func (_m *Repository) StoreDetail(product_slug string, domain domain_products.Detail_Product) error {
	ret := _m.Called(product_slug, domain)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, domain_products.Detail_Product) error); ok {
		r0 = rf(product_slug, domain)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: id, domain
func (_m *Repository) Update(id int, domain domain_products.Products) error {
	ret := _m.Called(id, domain)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, domain_products.Products) error); ok {
		r0 = rf(id, domain)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateCategory provides a mock function with given fields: id, domain
func (_m *Repository) UpdateCategory(id int, domain domain_products.Category_Product) error {
	ret := _m.Called(id, domain)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, domain_products.Category_Product) error); ok {
		r0 = rf(id, domain)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateDetail provides a mock function with given fields: id, domain
func (_m *Repository) UpdateDetail(id int, domain domain_products.Detail_Product) error {
	ret := _m.Called(id, domain)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, domain_products.Detail_Product) error); ok {
		r0 = rf(id, domain)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateDetails provides a mock function with given fields: codeLama, codeBaru
func (_m *Repository) UpdateDetails(codeLama string, codeBaru string) error {
	ret := _m.Called(codeLama, codeBaru)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(codeLama, codeBaru)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepository creates a new instance of Repository. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t testing.TB) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
